stopifnot(packageVersion("pomp")>="1.8.8.1")
read.csv("./data/data.csv") %>%
subset(weeks <= 40, select=c(weeks,rep,L_obs,P_obs,A_obs)) -> dat
dat %>%
melt(id=c("weeks","rep")) %>%
acast(variable~rep~weeks) -> datarray
stages.E <- 7
stages.L <- 7
stages.P <- 7
stages.A <- 1
params_box <- rbind(
b=c(0, 20),
cea=c(0, 1),
cel = c(0, 1),
cpa = c(0, 1),
mu_A = c(0, 1),
mu_L = c(0, 1),
tau_E = c(7, 14),
tau_L = c(7, 14),
tau_P = c(7, 14),
od = c(0,1)
)
glob_snippet <- Csnippet(sprintf("
#include <math.h>
#define ESTAGES %d
#define LSTAGES %d
#define PSTAGES %d
#define ASTAGES %d
#define L_0 250
#define P_0 5
#define A_0 100
", stages.E, stages.L, stages.P, stages.A))
init_snippet <-
Csnippet("
double *E = &E1;
double *L = &L1;
double *P = &P1;
int k = 0;
for(k = 0; k < 7; k++) E[k] = 0;
for(k = 0; k < 5; k++) L[k] = 36;
for(k = 5; k < 7; k++) L[k] = 35;
for(k = 0; k < 5; k++) P[k] = 1;
for(k = 5; k < 7; k++) P[k] = 0;
A = 100;")
rproc_snippet <-
Csnippet("
double *E = &E1;
double *L = &L1;
double *P = &P1;
int k;
double L_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
double gamma_E = (ESTAGES / tau_E) * exp((-cel * L_tot - cea * A) / ESTAGES);
double gamma_L = (LSTAGES / tau_L) * (1 - mu_L);
double gamma_P = (PSTAGES / tau_P) * exp((-cpa * A) / ESTAGES);
double mu_e = (ESTAGES / tau_E) - gamma_E;
double mu_l = (LSTAGES / tau_L) - gamma_L;
double mu_p = (PSTAGES / tau_P) - gamma_P;
double etrans[2*ESTAGES], ltrans[2*LSTAGES], ptrans[2*PSTAGES], adeath;
// Calculate who goes where
for (k = 0; k < ESTAGES; k++) {
etrans[2*k]   = rbinom(E[k], gamma_E);                             // Eggs growing to next stage
etrans[2*k+1] = rbinom(E[k] - etrans[2*k] , mu_e/(1 - gamma_E) ); // Eggs dying
}
for (k = 0; k < LSTAGES; k++) {
ltrans[2*k]   = rbinom(L[k], gamma_L);                          // Larvae growing to next stage
ltrans[2*k+1] = rbinom(L[k]-ltrans[2*k], mu_l/(1 - gamma_L));   // Larvae dying
}
for (k = 0; k < PSTAGES; k++) {
ptrans[2*k]   = rbinom(P[k], gamma_P);                           // Pupae growing to next stage
ptrans[2*k+1] = rbinom(P[k]-ptrans[2*k], mu_p/(1 - gamma_P) ); // Pupae dying
}
adeath = rbinom(A, mu_A);
// Bookkeeping
E[0] += rpois(b*A); // oviposition
for (k = 0; k < ESTAGES; k++) {
E[k] -= (etrans[2*k]+etrans[2*k+1]);
E[k+1] += etrans[2*k]; // E[ESTAGES] == L[0]!!
}
for (k = 0; k < LSTAGES; k++) {
L[k] -= (ltrans[2*k]+ltrans[2*k+1]);
L[k+1] += ltrans[2*k]; // L[LSTAGES] == P[0]!!
}
for (k = 0; k < PSTAGES; k++) {
P[k] -= (ptrans[2*k]+ptrans[2*k+1]);
P[k+1] += ptrans[2*k]; // P[PSTAGES] == A[0]!!
}
A -= adeath;
")
dmeas_snippet <-Csnippet(
"
const double *L = &L1;
const double *P = &P1;
double fudge = 1e-9;
int k;
double L_tot = 0;
double P_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
for (k = 0; k < PSTAGES; k++) P_tot += P[k];
lik = dnbinom_mu(L_obs, 1/od, L_tot+fudge, 1) +
dnbinom_mu(P_obs, 1/od, P_tot+fudge, 1) +
dnbinom_mu(A_obs, 1/od, A+fudge,     1);
//  if(lik < -138){
//    Rprintf(\"\\n\\nweeks %f\", t);
//    Rprintf(\"\\nL_tot %f\", L_tot);
//    Rprintf(\"\\nP_tot %f\", P_tot);
//    Rprintf(\"\\nA_tot %f\", A);
//    Rprintf(\"\\nL_obs %f\", L_obs);
//    Rprintf(\"\\nP_obs %f\", P_obs);
//    Rprintf(\"\\nA_obs %f\", A_obs);
//    Rprintf(\"\\nloglik %f\",lik);
//  }
lik = (give_log) ? lik : exp(lik);
")
rmeas_snippet <-
Csnippet("
const double *L = &L1;
const double *P = &P1;
double fudge = 1e-9;
int k;
double L_tot = 0;
double P_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
for (k = 0; k < PSTAGES; k++) P_tot += P[k];
L_obs = rnbinom_mu(1/od,L_tot+fudge);
P_obs = rnbinom_mu(1/od,P_tot+fudge);
A_obs = rnbinom_mu(1/od,A+fudge);")
from_est <-
Csnippet("
Tb = exp(b);
Tcea = expit(cea);
Tcel = expit(cel);
Tcpa = expit(cpa);
Tmu_A = expit(mu_A);
Tmu_L = expit(mu_L);
Ttau_E = ESTAGES+exp(tau_E);
Ttau_L = LSTAGES+exp(tau_L);
Ttau_P = PSTAGES+exp(tau_P);
Tod = exp(od);")
to_est <-
Csnippet("
Tb = log(b);
Tcea = logit(cea);
Tcel = logit(cel);
Tcpa = logit(cpa);
Tmu_A = logit(mu_A);
Tmu_L = logit(mu_L);
Ttau_E = log(tau_E-ESTAGES);
Ttau_L = log(tau_L-LSTAGES);
Ttau_P = log(tau_P-PSTAGES);
Tod = log(od);")
pomp(
statenames = c(sprintf("E%d",1:stages.E),
sprintf("L%d",1:stages.L),
sprintf("P%d",1:stages.P),"A"),
paramnames = c("b", "cea", "cel", "cpa", "mu_A", "mu_L",
"tau_E", "tau_L", "tau_P","od"),
globals = glob_snippet,
initializer = init_snippet,
rprocess = discrete.time.sim(
step.fun = rproc_snippet,
delta.t = 1/7),
dmeasure = dmeas_snippet,
rmeasure = rmeas_snippet,
toEstimationScale = to_est,
fromEstimationScale = from_est,
params = c(b=1.18702207924403,
cea=0.0132088702404268,
cel=0.0172244842038504,
cpa=0.00466955565765198,
mu_A=1.89532307252467e-05,
mu_L=0.0158937470126093,
tau_E=15.7219226675806,
tau_L=7.18906255435284,
tau_P=18.0248791283609,
od = 1
)) -> model
library(ggplot2)
library(plyr)
library(reshape2)
library(pomp)
library(magrittr)
library(reshape2)
library(foreach)
#options(echo = FALSE)
stopifnot(packageVersion("pomp")>="1.8.8.1")
read.csv("./data/data.csv") %>%
subset(weeks <= 40, select=c(weeks,rep,L_obs,P_obs,A_obs)) -> dat
dat %>%
melt(id=c("weeks","rep")) %>%
acast(variable~rep~weeks) -> datarray
stages.E <- 7
stages.L <- 7
stages.P <- 7
stages.A <- 1
params_box <- rbind(
b=c(0, 20),
cea=c(0, 1),
cel = c(0, 1),
cpa = c(0, 1),
mu_A = c(0, 1),
mu_L = c(0, 1),
tau_E = c(7, 14),
tau_L = c(7, 14),
tau_P = c(7, 14),
od = c(0,1)
)
glob_snippet <- Csnippet(sprintf("
#include <math.h>
#define ESTAGES %d
#define LSTAGES %d
#define PSTAGES %d
#define ASTAGES %d
#define L_0 250
#define P_0 5
#define A_0 100
", stages.E, stages.L, stages.P, stages.A))
init_snippet <-
Csnippet("
double *E = &E1;
double *L = &L1;
double *P = &P1;
int k = 0;
for(k = 0; k < 7; k++) E[k] = 0;
for(k = 0; k < 5; k++) L[k] = 36;
for(k = 5; k < 7; k++) L[k] = 35;
for(k = 0; k < 5; k++) P[k] = 1;
for(k = 5; k < 7; k++) P[k] = 0;
A = 100;")
rproc_snippet <-
Csnippet("
double *E = &E1;
double *L = &L1;
double *P = &P1;
int k;
double L_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
double gamma_E = (ESTAGES / tau_E) * exp((-cel * L_tot - cea * A) / ESTAGES);
double gamma_L = (LSTAGES / tau_L) * (1 - mu_L);
double gamma_P = (PSTAGES / tau_P) * exp((-cpa * A) / ESTAGES);
double mu_e = (ESTAGES / tau_E) - gamma_E;
double mu_l = (LSTAGES / tau_L) - gamma_L;
double mu_p = (PSTAGES / tau_P) - gamma_P;
double etrans[2*ESTAGES], ltrans[2*LSTAGES], ptrans[2*PSTAGES], adeath;
// Calculate who goes where
for (k = 0; k < ESTAGES; k++) {
etrans[2*k]   = rbinom(E[k], gamma_E);                             // Eggs growing to next stage
etrans[2*k+1] = rbinom(E[k] - etrans[2*k] , mu_e/(1 - gamma_E) ); // Eggs dying
}
for (k = 0; k < LSTAGES; k++) {
ltrans[2*k]   = rbinom(L[k], gamma_L);                          // Larvae growing to next stage
ltrans[2*k+1] = rbinom(L[k]-ltrans[2*k], mu_l/(1 - gamma_L));   // Larvae dying
}
for (k = 0; k < PSTAGES; k++) {
ptrans[2*k]   = rbinom(P[k], gamma_P);                           // Pupae growing to next stage
ptrans[2*k+1] = rbinom(P[k]-ptrans[2*k], mu_p/(1 - gamma_P) ); // Pupae dying
}
adeath = rbinom(A, mu_A);
// Bookkeeping
E[0] += rpois(b*A); // oviposition
for (k = 0; k < ESTAGES; k++) {
E[k] -= (etrans[2*k]+etrans[2*k+1]);
E[k+1] += etrans[2*k]; // E[ESTAGES] == L[0]!!
}
for (k = 0; k < LSTAGES; k++) {
L[k] -= (ltrans[2*k]+ltrans[2*k+1]);
L[k+1] += ltrans[2*k]; // L[LSTAGES] == P[0]!!
}
for (k = 0; k < PSTAGES; k++) {
P[k] -= (ptrans[2*k]+ptrans[2*k+1]);
P[k+1] += ptrans[2*k]; // P[PSTAGES] == A[0]!!
}
A -= adeath;
")
dmeas_snippet <-Csnippet(
"
const double *L = &L1;
const double *P = &P1;
double fudge = 1e-9;
int k;
double L_tot = 0;
double P_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
for (k = 0; k < PSTAGES; k++) P_tot += P[k];
lik = dnbinom_mu(L_obs, 1/od, L_tot+fudge, 1) +
dnbinom_mu(P_obs, 1/od, P_tot+fudge, 1) +
dnbinom_mu(A_obs, 1/od, A+fudge,     1);
//  if(lik < -138){
//    Rprintf(\"\\n\\nweeks %f\", t);
//    Rprintf(\"\\nL_tot %f\", L_tot);
//    Rprintf(\"\\nP_tot %f\", P_tot);
//    Rprintf(\"\\nA_tot %f\", A);
//    Rprintf(\"\\nL_obs %f\", L_obs);
//    Rprintf(\"\\nP_obs %f\", P_obs);
//    Rprintf(\"\\nA_obs %f\", A_obs);
//    Rprintf(\"\\nloglik %f\",lik);
//  }
lik = (give_log) ? lik : exp(lik);
")
rmeas_snippet <-
Csnippet("
const double *L = &L1;
const double *P = &P1;
double fudge = 1e-9;
int k;
double L_tot = 0;
double P_tot = 0;
for (k = 0; k < LSTAGES; k++) L_tot += L[k];
for (k = 0; k < PSTAGES; k++) P_tot += P[k];
L_obs = rnbinom_mu(1/od,L_tot+fudge);
P_obs = rnbinom_mu(1/od,P_tot+fudge);
A_obs = rnbinom_mu(1/od,A+fudge);")
from_est <-
Csnippet("
Tb = exp(b);
Tcea = expit(cea);
Tcel = expit(cel);
Tcpa = expit(cpa);
Tmu_A = expit(mu_A);
Tmu_L = expit(mu_L);
Ttau_E = ESTAGES+exp(tau_E);
Ttau_L = LSTAGES+exp(tau_L);
Ttau_P = PSTAGES+exp(tau_P);
Tod = exp(od);")
to_est <-
Csnippet("
Tb = log(b);
Tcea = logit(cea);
Tcel = logit(cel);
Tcpa = logit(cpa);
Tmu_A = logit(mu_A);
Tmu_L = logit(mu_L);
Ttau_E = log(tau_E-ESTAGES);
Ttau_L = log(tau_L-LSTAGES);
Ttau_P = log(tau_P-PSTAGES);
Tod = log(od);")
pomp(
data = subset(dat, rep==4, select=-rep),
times="weeks", t0=0,
statenames = c(sprintf("E%d",1:stages.E),
sprintf("L%d",1:stages.L),
sprintf("P%d",1:stages.P),"A"),
paramnames = c("b", "cea", "cel", "cpa", "mu_A", "mu_L",
"tau_E", "tau_L", "tau_P","od"),
globals = glob_snippet,
initializer = init_snippet,
rprocess = discrete.time.sim(
step.fun = rproc_snippet,
delta.t = 1/7),
dmeasure = dmeas_snippet,
rmeasure = rmeas_snippet,
toEstimationScale = to_est,
fromEstimationScale = from_est,
params = c(b=1.18702207924403,
cea=0.0132088702404268,
cel=0.0172244842038504,
cpa=0.00466955565765198,
mu_A=1.89532307252467e-05,
mu_L=0.0158937470126093,
tau_E=15.7219226675806,
tau_L=7.18906255435284,
tau_P=18.0248791283609,
od = 1
)) -> model
p <- c(unlist(as.data.frame(apply(params_box,1,function(x)runif(30,x[1],x[2])))[1,]))
p
model
model <- pomp(model, params = p)
dat2 <- subset(simulate(model, as.data.frame=TRUE),select=c(time, L_obs, P_obs, A_obs))
dat2
model <- pomp(model, data = dat2, times = "time", t0 = 0)
?userdata
?pomp
data(model)
pomp(model, data = dat2, times = "time", t0 = 0)
model
dat2
dat2['time',1]
dat2['time']
dat2['time'][1]
dat2['time'][1,]
pomp(
data = dat2
times="time", t0=0,
statenames = c(sprintf("E%d",1:stages.E),
sprintf("L%d",1:stages.L),
sprintf("P%d",1:stages.P),"A"),
paramnames = c("b", "cea", "cel", "cpa", "mu_A", "mu_L",
"tau_E", "tau_L", "tau_P","od"),
globals = glob_snippet,
initializer = init_snippet,
rprocess = discrete.time.sim(
step.fun = rproc_snippet,
delta.t = 1/7),
dmeasure = dmeas_snippet,
rmeasure = rmeas_snippet,
toEstimationScale = to_est,
fromEstimationScale = from_est,
params = p
) -> model
pomp(
data = dat2,
times="time", t0=0,
statenames = c(sprintf("E%d",1:stages.E),
sprintf("L%d",1:stages.L),
sprintf("P%d",1:stages.P),"A"),
paramnames = c("b", "cea", "cel", "cpa", "mu_A", "mu_L",
"tau_E", "tau_L", "tau_P","od"),
globals = glob_snippet,
initializer = init_snippet,
rprocess = discrete.time.sim(
step.fun = rproc_snippet,
delta.t = 1/7),
dmeasure = dmeas_snippet,
rmeasure = rmeas_snippet,
toEstimationScale = to_est,
fromEstimationScale = from_est,
params = p
) -> model
model
seed
p <- c(unlist(as.data.frame(apply(params_box,1,function(x)runif(30,x[1],x[2])))[1,]))
p
p <- c(unlist(as.data.frame(apply(params_box,1,function(x)runif(30,x[1],x[2])))[1,]))
p
runif
?runif
?apply
?function
(x)
?runif
append.csv
?write.csv
c(p, p)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", append = TRUE, row.names=FALSE)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", row.names=True)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", row.names=TRUE)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", append = TRUE, row.names=FALSE)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", append = TRUE, row.names=FALSE)
write.csv(c(p, p), file = "./output/target_vs_actual.csv", append = TRUE, row.names=FALSE)
?transpose
?trans
?write.csv
as.data.frame(c(p, p))
?as.data.frame
as.data.frame(c(p, p), row.names = c(col.names(p), col.names(p)))
random
rand
?random
randint
r
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.csv(c(1, "Recovered", p_optim), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.csv(c(1, "Recovered", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Recovered", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Recovered", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Recovered", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(c(1, "Target", p), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=F)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.csv(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.table(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.table(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.table(t(c(1, "Target", p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE, header=F)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE, header=F)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, row.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE)
write.table(t(c(p, p)), file = "./output/target_vs_recovered.csv", append = TRUE, col.names=FALSE, row.names = FALSE, sep="'")
read.csv("target_vs_recovered.csv")
read.csv("./output/target_vs_recovered.csv")
read.csv("./output/target_vs_recovered.csv") -> d
d
class(d)
d
d[1:11]
d[1:10]
d[1:10] - d[11:20]
?bake
read.csv("./output/target_vs_recovered.csv") -> d
d
d[1, 1:10] - d[1, 11:20]
d[2, 1:10] - d[2, 11:20]
d[2, 1:10]
d[2, 11:20]
system('ls')
read.csv("./output/target_vs_recovered.csv") -> d
